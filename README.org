#+TITLE: MCP.el - Model Context Protocol for Emacs
#+AUTHOR: Jason Walsh
#+DATE: 2025-02-03
#+PROPERTY: header-args:emacs-lisp :tangle yes :mkdirp t
#+PROPERTY: header-args:bash :tangle yes :mkdirp t
#+PROPERTY: header-args:mermaid :tangle yes :mkdirp t

[[https://www.gnu.org/licenses/gpl-3.0][https://img.shields.io/badge/License-GPLv3-blue.svg]]

=MCP.el= provides a Model Context Protocol implementation for Emacs, enabling structured communication between Emacs and external model context servers.

* Features

#+begin_src mermaid :file docs/images/features.png
graph TD
    MCP[MCP.el Core] --> Comm[Structured Communication]
    MCP --> Servers[MCP Servers]
    MCP --> Tools[Tool System]
    MCP --> Ops[Operations]
    MCP --> Resources[Resource Management]
    MCP --> Testing[Test Suite]
    MCP --> Integration[Package Integration]

    Servers --> FS[Filesystem]
    Servers --> Generic[Generic]
    
    Tools --> Prompts[Prompt System]
    Tools --> Extensions[Extensions]
    
    Ops --> Async[Asynchronous]
    Ops --> Sync[Synchronous]
    
    Integration --> GPTel[gptel]
#+end_src

- Structured communication with MCP servers
- Support for filesystem and generic MCP servers
- Extensible tool and prompt system
- Asynchronous and synchronous operations
- Resource management capabilities
- Comprehensive test suite
- Integration with popular Emacs packages (e.g., gptel)

* Installation

** Requirements

Before installation, ensure you have:
- Emacs 30.0 or later
- Node.js and npm (for MCP servers)

** MELPA (Coming Soon)

MCP.el will be available through MELPA. Once available:

#+begin_src emacs-lisp :tangle no
(package-install 'mcp)
#+end_src

** Manual Installation

To install manually:

#+begin_src bash :dir mcp.el
git clone https://github.com/jwalsh/mcp.el.git
cd mcp.el
make
make install
#+end_src

* Usage

Basic usage example:

#+begin_src emacs-lisp
(require 'mcp)

;; Initialize a filesystem MCP server connection
(mcp-connect-server "filesystem" 
                    "npx" 
                    '("-y" "@modelcontextprotocol/server-filesystem" "~/Documents/")
                    :initial-callback
                    (lambda (connection)
                      (message "Connected to %s" (jsonrpc-name connection)))
                    :tools-callback
                    (lambda (connection tools)
                      (message "Available tools: %s" tools)))

;; Create a file writing tool
(mcp-make-text-gptel-tool "filesystem" "write_file")

;; Use the tool synchronously
(let ((connection (gethash "filesystem" mcp-server-connections)))
  (mcp-call-tool "write_file" 
                 '(:path "example.txt" 
                   :content "Hello, MCP!")))
#+end_src

For more examples, see the =examples/= directory.

* Development

** Prerequisites

#+begin_src mermaid :file docs/images/prerequisites.png
graph LR
    Dev[Development] --> Emacs[Emacs 30.0+]
    Dev --> Node[Node.js & npm]
    Dev --> Make[GNU Make]
    Dev --> ReqPkg[Required Packages]
    Dev --> DevPkg[Dev Packages]
    
    ReqPkg --> JSONRPC[jsonrpc]
    DevPkg --> PLint[package-lint]
    DevPkg --> GPTel[gptel]
#+end_src

** Build System

The project uses a standardized Makefile with the following main targets:

#+begin_src makefile :tangle Makefile
EMACS ?= emacs
BATCH = $(EMACS) --batch -Q
PACKAGE_NAME = mcp
VERSION = 0.1.0

# Directories
EXAMPLES_DIR = examples
TEST_DIR = tests
BUILD_DIR = build
DIST_DIR = dist

# Source files
EL_FILES = $(wildcard *.el) $(wildcard $(EXAMPLES_DIR)/*/*.el)
TESTS = $(wildcard $(TEST_DIR)/*.el)
ORG_FILES = servers.org README.org

# Build targets
all: build test

# Tangle README.org specifically
readme: init
        $(BATCH) --eval "(require 'org)" \
                --eval '(org-babel-tangle-file "README.org")'

# Clean built files
clean:
        rm -rf $(BUILD_DIR) $(DIST_DIR) *.elc $(EXAMPLES_DIR)/*/*.elc

# Create necessary directories
init:
        mkdir -p $(BUILD_DIR) $(DIST_DIR) $(TEST_DIR)

# Tangle org files
tangle: init
        $(BATCH) --eval "(require 'org)" \
                --eval '(mapc #'\''org-babel-tangle-file (list "servers.org" "README.org"))'

# Byte compile
compile: init tangle
        $(BATCH) -L . \
                --eval "(setq byte-compile-error-on-warn t)" \
                -f batch-byte-compile $(EL_FILES)

# Run tests
test: compile
        $(BATCH) -L . -L $(TEST_DIR) \
                --eval "(setq load-prefer-newer t)" \
                -l ert \
                -l $(TEST_DIR)/test-mcp.el \
                -f ert-run-tests-batch-and-exit

# Build package
build: compile
        mkdir -p $(BUILD_DIR)
        cp $(PACKAGE_NAME).el $(BUILD_DIR)/
        cp -r $(EXAMPLES_DIR) $(BUILD_DIR)/
        cp README.org LICENSE $(BUILD_DIR)/ 2>/dev/null || true

# Create distribution package
dist: build
        mkdir -p $(DIST_DIR)
        tar -czf $(DIST_DIR)/$(PACKAGE_NAME)-$(VERSION).tar.gz -C $(BUILD_DIR) .

# Install dependencies
deps:
        $(BATCH) --eval "(require 'package)" \
                --eval "(add-to-list 'package-archives '(\"melpa\" . \"https://melpa.org/packages/\") t)" \
                --eval "(package-initialize)" \
                --eval "(package-refresh-contents)" \
                --eval "(package-install 'jsonrpc)"

# Run example
run: compile
        $(EMACS) -Q -L . -L $(EXAMPLES_DIR)/filesystem \
                -l $(PACKAGE_NAME).el \
                -l $(EXAMPLES_DIR)/filesystem/mcp-fs-connection.el \
                --eval "(mcp-fs-connect)"

# Development server for testing
dev: compile
        $(EMACS) -Q -L . -L $(EXAMPLES_DIR) \
                -l $(PACKAGE_NAME).el \
                --eval "(require 'mcp-fs-connection)" \
                --eval "(mcp-fs-connect)"

# Check style
lint:
        $(BATCH) -l package-lint \
                --eval "(setq package-lint-main-file \"$(PACKAGE_NAME).el\")" \
                -f package-lint-batch-and-exit $(EL_FILES)

# Generate documentation
docs: init
        $(BATCH) -l ox-md \
                --eval "(org-babel-tangle-file \"servers.org\")" \
                --eval "(with-current-buffer (find-file \"servers.org\") (org-md-export-to-markdown))"

# Package for MELPA
package: clean compile test docs dist
        @echo "Package $(PACKAGE_NAME)-$(VERSION) built successfully"
        @echo "Distribution archive: $(DIST_DIR)/$(PACKAGE_NAME)-$(VERSION).tar.gz"

# Create test scaffolding
test-init:
        mkdir -p $(TEST_DIR)
        [ -f $(TEST_DIR)/test-mcp.el ] || \
        echo '(require '\''ert)\n(require '\''mcp)\n\n(ert-deftest test-mcp-version () \n  "Test MCP version."\n  (should (string= *MCP-VERSION* "2024-11-05")))' > $(TEST_DIR)/test-mcp.el

.PHONY: all clean init tangle compile test build dist deps run dev lint docs package test-init
#+end_src

For full details of the build system, see [[file:docs/RFC-001-makefile-standards.md][RFC-001-makefile-standards.md]].

** Directory Structure

#+begin_src mermaid :file docs/images/directory-structure.png
graph TD
    Root[.] --> MCP[mcp.el]
    Root --> Examples[examples/]
    Root --> Test[test/]
    Root --> Docs[docs/]
    Root --> Build[build/]
    Root --> Dist[dist/]
    
    Examples --> FSImpl[filesystem/]
    Test --> TestFiles[*.el]
    Build --> Artifacts[Generated Files]
    Dist --> Packages[Distribution Packages]
#+end_src

** Running Tests

#+begin_src bash
make test
#+end_src

To create new tests:

#+begin_src bash
make test-init
#+end_src

** Development Environment

To start a development environment:

#+begin_src bash
make dev
#+end_src

* Contributing

1. Fork the repository
2. Create your feature branch (=git checkout -b feature/amazing-feature=)
3. Run tests (=make test=)
4. Run style checks (=make lint=)
5. Commit your changes (=git commit -am 'Add amazing feature'=)
6. Push to the branch (=git push origin feature/amazing-feature=)
7. Create a Pull Request

* Documentation

- [[file:docs/user-guide.md][User Guide]]
- [[file:docs/api-reference.md][API Reference]]
- [[file:docs/RFC-001-makefile-standards.md][Build System Standards]]

* License

This project is licensed under the GNU General Public License v3.0 - see the [[file:LICENSE][LICENSE]] file for details.

* Contact

Jason Walsh - [[https://github.com/jwalsh][@jwalsh]]

Project Link: [[https://github.com/jwalsh/mcp.el][https://github.com/jwalsh/mcp.el]]